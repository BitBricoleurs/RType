name: Package, and Release

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions: write-all
    steps: 
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: lts/*
      
      - run: npm clean-install
      - name: Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch latest release version
        id: latest_version
        run: |
          LATEST_VERSION=$(gh release list | head -n 1 | awk '{print $1}')
          echo "Latest version is $LATEST_VERSION"
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - run: echo ${{ env.LATEST_VERSION }}

  build-and-package:
  needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest, fedora-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake

      - name: Get dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake

      - name: Get dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake

      - name: Build & Package (Fedora)
        if: matrix.os == 'fedora-latest'
        run: |
          docker run -v $PWD:/workdir fedora:latest /bin/sh -c "cd /workdir; dnf install -y cmake; ./setup/dependencies.sh; cmake . -DCPACK_PACKAGE_VERSION=${{ env.LATEST_VERSION }}; cpack"

      - name: Build & Package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          ./setup/dependencies.sh
          cmake . -DCPACK_PACKAGE_VERSION=${{ env.LATEST_VERSION }}
          cmake --build . --config Release
          cpack

      - name: Build & Package (Generic)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          ./setup/dependencies.sh
          cmake . -DCPACK_PACKAGE_VERSION=${{ env.LATEST_VERSION }}
          cpack

      - name: Upload Artifact
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: RTYPE-${{ matrix.os }}
          path: ./RTYPE*.deb

      - name: Upload Artifact (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: RTYPE-${{ matrix.os }}
          path: ./RTYPE*.dmg
      - name: Upload Artifact (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: RTYPE-${{ matrix.os }}
          path: ./*.exe

      - name: Upload Artifact (Fedora)
        if: ${{ matrix.os == 'fedora-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: RTYPE-${{ matrix.os }}
          path: ./*.rpm

  release:
    needs: build-and-package
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Upload Release Asset via gh CLI
        run: |
          gh release upload ${{env.LATEST_VERSION}} ./artifacts/RTYPE-ubuntu-latest/*.deb
          gh release upload ${{env.LATEST_VERSION}} ./artifacts/RTYPE-macos-latest/*.dmg
          gh release upload ${{env.LATEST_VERSION}} ./artifacts/RTYPE-windows-latest/*.exe
          gh release upload ${{env.LATEST_VERSION}} ./artifacts/RTYPE-fedora-latest/*.rpm
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

