name: Build, Package, and Release

on:
  push:
    branches:
      - main

jobs:
  build-and-package:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get dependencies (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake
          sudo apt-get install -y libboost-all-dev

      - name: Get dependencies (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install cmake
          brew install boost

      - name: Build and Package
        run: |
          mkdir build
          cd build
          cmake ..
          make
          tar czvf MyBoostApp-${{ matrix.os }}.tar.gz ./MyBoostApp

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: MyBoostApp-${{ matrix.os }}
          path: ./build/MyBoostApp-${{ matrix.os }}.tar.gz

  release:
    needs: build-and-package
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: lts/*
      - run: npm clean-install

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch latest release version
        id: latest_version
        run: |
          LATEST_VERSION=$(gh release list | head -n 1 | awk '{print $1}')
          echo "Latest version is $LATEST_VERSION"
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - run: echo ${{ env.LATEST_VERSION }}

      - name: Upload Release Asset via gh CLI
        run: |
          gh release upload ${{env.LATEST_VERSION}} ./artifacts/MyBoostApp-ubuntu-latest/MyBoostApp-ubuntu-latest.tar.gz
          gh release upload ${{env.LATEST_VERSION}} ./artifacts/MyBoostApp-macos-latest/MyBoostApp-macos-latest.tar.gz
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
